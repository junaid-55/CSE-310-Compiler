Line# 1: Token <INT> Lexeme int
Line# 1: Token <ID> Lexeme i
Line# 1: Token <COMMA> Lexeme ,
Line# 1: Token <ID> Lexeme j
Line# 1: Token <SEMICOLON> Lexeme ;
Line# 2: Token <INT> Lexeme int
Line# 2: Token <ID> Lexeme main
Line# 2: Token <LPAREN> Lexeme (
Line# 2: Token <RPAREN> Lexeme )
Line# 2: Token <LCURL> Lexeme {
Line# 3: Token <ID> Lexeme j
Line# 3: Token <INCOP> Lexeme ++
Line# 3: Token <SEMICOLON> Lexeme ;
Line# 4: Token <ID> Lexeme i
Line# 4: Token <ASSIGNOP> Lexeme =
Line# 4: Token <CONST_INT> Lexeme 5
Line# 4: Token <SEMICOLON> Lexeme ;
Line# 5: Token <ID> Lexeme j
Line# 5: Token <ASSIGNOP> Lexeme =
Line# 5: Token <ID> Lexeme i
Line# 5: Token <INCOP> Lexeme ++
Line# 5: Token <SEMICOLON> Lexeme ;
Line# 6: Token <ID> Lexeme println
Line# 6: Token <LPAREN> Lexeme (
Line# 6: Token <ID> Lexeme j
Line# 6: Token <RPAREN> Lexeme )
Line# 6: Token <SEMICOLON> Lexeme ;
Line# 7: Token <ID> Lexeme println
Line# 7: Token <LPAREN> Lexeme (
Line# 7: Token <ID> Lexeme i
Line# 7: Token <RPAREN> Lexeme )
Line# 7: Token <SEMICOLON> Lexeme ;
Line# 8: Token <ID> Lexeme i
Line# 8: Token <ASSIGNOP> Lexeme =
Line# 8: Token <CONST_INT> Lexeme 0
Line# 8: Token <SEMICOLON> Lexeme ;
Line# 9: Token <IF> Lexeme if
Line# 9: Token <LPAREN> Lexeme (
Line# 9: Token <ID> Lexeme i
Line# 9: Token <INCOP> Lexeme ++
Line# 9: Token <RPAREN> Lexeme )
Line# 9: Token <LCURL> Lexeme {
Line# 10: Token <ID> Lexeme println
Line# 10: Token <LPAREN> Lexeme (
Line# 10: Token <ID> Lexeme i
Line# 10: Token <RPAREN> Lexeme )
Line# 10: Token <SEMICOLON> Lexeme ;
Line# 11: Token <RCURL> Lexeme }
Line# 11: Token <ELSE> Lexeme else
Line# 11: Token <LCURL> Lexeme {
Line# 12: Token <ID> Lexeme println
Line# 12: Token <LPAREN> Lexeme (
Line# 12: Token <ID> Lexeme i
Line# 12: Token <RPAREN> Lexeme )
Line# 12: Token <SEMICOLON> Lexeme ;
Line# 13: Token <RCURL> Lexeme }
Line# 15: Token <RETURN> Lexeme return
Line# 15: Token <CONST_INT> Lexeme 0
Line# 15: Token <SEMICOLON> Lexeme ;
Line# 16: Token <RCURL> Lexeme }
